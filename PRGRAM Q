
Practical No:1

1.Write a program to implement symmetric encryption using Ceaser Cipher algorithm.
2.Write a program to implement asymmetric encryption using RSA algorithm. Generate both the keys public key and private key and store it in file. Also encrypt and decrypt the message using keys.
3.Write a program to demonstrate the use of Hash Functions (SHA-256).
4.Write a program to demonstrate Merkle Tree.

Practical No:2

1.Write a program to create the chain with Genesis block and adding block into
blockchain and validating the chain for any alteration. (Part-I)
2. Write a program to implementing proof of work for blockchain. (Part-II)
3. Write a program to add multiple transactions into block and give reward to
    miner for successful mining of block in blockchain. (Part-III)
4. Write a program to sign the transaction with private key and verify the
signed transactions for blockchain. (Part-IV)
//////////////////////

Practical No:3

1.Write a solidity smart contract to display hello world message.
2.Write a solidity smart contract to demonstrate state variable, local variable and global variable
3.Write a solidity smart contract to demonstrate getter and setter methods.
4.Write a solidity smart contract to demonstrate function modifier.
5.Write a solidity smart contract to demonstrate use of structure.
6.Write a solidity smart contract to calculate percentage of marks obtained by students for six subject in final examination.
7.Write a solidity smart contract to find the factorial of entered number.
8.Write a solidity smart contract to check whether entered number is palindrome or not.
9.Write a solidity smart contract to generate Fibonacci Series up to given number.
10.Write a solidity smart contract to check whether entered number is prime number or not.
11.Write a solidity smart contract to create arithmetic calculator which includes functions for operations addition, subtraction, multiplication,division
12.Write a solidity smart contract to demonstrate view function and pure function.
13.Write a solidity smart contract to demonstrate inbuilt mathematical functions.
14.Write a solidity smart contract to demonstrate inheritance in contract.
15.Write a solidity smart contract to demonstrate events.
16.Write a solidity smart contract to demonstrate error handling.
17.Write a solidity smart contract for Bank Account which provides operations such as check account balance, withdraw amount and deposit amount etc.

//////////////////////
Practical No:4

1.Install the metamask in browser. Setup the metamask digital cryptocurrency wallet. Create multiple accounts in metamask and connect with one of 	the etherum blockchain test network. Perform the task buy ethers and send ethers from one account to another. Take the screenshots of 	created accounts,account assets and account transactions which showing the details of transaction.
2.Write a solidity smart contract to transfer funds (ethers) from user account to contract account using remixIDE and JavaScriptVM environment.
3.Write a solidity smart contract to withdraw funds (ethers) from contract account to user account using remixIDE and JavaScriptVM environment.
4.Write a solidity smart contract to apply restriction that only owner of the contract can withdraw funds (ethers) from contract account to his/her user 	account using remixIDE and JavaScriptVM environment.
5.Create Ethereum node using Geth and create genesis block and create your personal private Ethereum blockchain. And use IPC to interact with Geth node to perform following task: create account, transfer funds using send transaction, mine the block, show the account balance before and after the mining the block, show the specific block details and access chain details
6.Create Ethereum node using Geth and create genesis block and create your personal private Ethereum blockchain. And use IPC to interact with Geth node to perform following task: create account, transfer funds using send transaction, mine the block, show the account balance before and after the mining the block, show the specific block details and access chain details.
7.Create new truffle project with migration script, smart contract and configuration file. First compile it using truffle suite. Then connect it with personal private blockchain i.e. Ganache and deploy (migrate) smart contract on Ganache. Open truffle console and create instance of deployed (migrated) contract of Ganache. Then interact with smart contract using created instance. Take screenshots of all transaction’s details and block details from Ganache
8.Create new truffle project with migration script, smart contract and configuration file. First compile it using truffle suite. Then connect it with personal private blockchain i.e. Ganache and deploy (migrate) smart contract on Ganache. Open truffle console and create instance of deployed (migrated) contract of Ganache. Then interact with smart contract using created instance. Take screenshots of all transaction’s details and block details from Ganache.
